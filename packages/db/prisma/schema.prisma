generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean?
  image         String?
  imagePublicId String?
  password      String?
  isSubscribed  Boolean   @default(false)
  isDeleted     Boolean   @default(false)
  bio           String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  accounts   Account[]
  interviews Interview[]
  payment    Payment[]
  Resume     Resume[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Interview {
  interviewId         String            @id @default(cuid())
  userId              String
  user                User              @relation(fields: [userId], references: [id]) // changed to reference id
  role                String?
  level               String?
  techStack           String[]
  noOfQuestions       Int
  type                String?
  status              String            @default("pending")
  updatedAt           DateTime          @updatedAt
  createdAt           DateTime          @default(now())
  isDeleted           Boolean           @default(false)
  interviewTemplateId String
  template            InterviewTemplate @relation(fields: [interviewTemplateId], references: [interviewTemplateId])

  questions Question[]
  feedback  Feedback?
  audio     InterviewAudio?
}

model Question {
  questionId  String    @id @default(uuid())
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [interviewId])

  questionText String
  order        Int
  createdAt    DateTime @default(now())
}

model Feedback {
  feedbackId       String    @id @default(uuid())
  interviewId      String    @unique
  interview        Interview @relation(fields: [interviewId], references: [interviewId])
  summary          String
  improvementAreas String[]
  confidenceScore  Int
}

model InterviewAudio {
  audioId     String    @id @default(uuid())
  interviewId String    @unique
  interview   Interview @relation(fields: [interviewId], references: [interviewId])

  isDeleted  Boolean  @default(false)
  startTime  DateTime
  endTime    DateTime
  transcript String[]
  audioUrl   String
}

model Payment {
  paymentId         String   @id @default(uuid())
  createdAt         DateTime @default(now())
  userId            String
  amount            Int
  paymentMethod     String
  razorpayOrderId   String
  razorpayPaymentId String
  metadata          Json?
  currency          String   @default("INR")

  user User @relation(fields: [userId], references: [id])
}

model Resume {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  fileName       String
  isDeleted      Boolean         @default(false)
  publicId       String
  fileUrl        String
  QdrantStatus   String          @default("uploadeding")
  AnalysisStatus String          @default("pending")
  qdrantFileId   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ResumeAnalysis ResumeAnalysis?
}

model ResumeAnalysis {
  resumeAnalysisId String   @id @default(cuid())
  resumeId         String   @unique
  resume           Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  atsScore         Int?
  analysis         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// LEVEL 1: Your main categories like Tech, Sales, Marketing.
model MainCategory {
  mainCategoryId String @id @default(cuid())
  name           String @unique // "Tech", "Sales", etc.

  subCategories SubCategory[]
}

model SubCategory {
  subCategoryId String @id @default(cuid())
  name          String // "Frontend", "Backend", "Lead Generation"

  mainCategoryId String
  mainCategory   MainCategory @relation(fields: [mainCategoryId], references: [mainCategoryId])

  templates InterviewTemplate[]

  @@unique([name, mainCategoryId])
}

model InterviewTemplate {
  interviewTemplateId String  @id @default(cuid())
  title               String
  description         String?
  estimatedDuration   Int

  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [subCategoryId])

  tags      Tag[]
  Interview Interview[]
}

model Tag {
  TagId String @id @default(cuid())
  name  String @unique

  templates InterviewTemplate[]
}
